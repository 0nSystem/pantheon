-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.


CREATE DATABASE management;
\c management;
CREATE SCHEMA IF NOT EXISTS public;
CREATE SCHEMA users;
CREATE SCHEMA applications;
CREATE SCHEMA enterprise;

CREATE TABLE IF NOT EXISTS public.language
(
    id_language     SERIAL,
    name            character varying(100) COLLATE pg_catalog."default" NOT NULL,
    iso_639_1_code  character varying(50) COLLATE pg_catalog."default"  NOT NULL,
    language_family character varying(50)                               NOT NULL,
    CONSTRAINT language_pkey PRIMARY KEY (id_language)
);

CREATE TABLE IF NOT EXISTS users."user"
(
    id_user        SERIAL,
    name           character varying(50) COLLATE pg_catalog."default"  NOT NULL,
    surname        character varying(50) COLLATE pg_catalog."default"  NOT NULL,
    email          character varying(100) COLLATE pg_catalog."default" NOT NULL UNIQUE,
    login          character varying(30) COLLATE pg_catalog."default"  NOT NULL UNIQUE,
    password       character varying(255) COLLATE pg_catalog."default" NOT NULL,
    high_date      timestamp                                           NOT NULL,
    high_id_user   integer references users.user (id_user),
    delete_date    timestamp,
    delete_id_user integer references users.user (id_user),
    CONSTRAINT user_pk PRIMARY KEY (id_user)
);

CREATE TABLE IF NOT EXISTS applications.application
(
    id_application SERIAL,
    name           character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description    character varying(255) COLLATE pg_catalog."default",
    high_date      timestamp                                           NOT NULL,
    high_id_user   integer                                             NOT NULL references users.user (id_user),
    delete_date    timestamp,
    delete_id_user integer references users.user (id_user),
    CONSTRAINT applications_pk PRIMARY KEY (id_application)
);

CREATE TABLE IF NOT EXISTS applications.attribute
(
    id_attribute   SERIAL,
    id_application integer references applications.application (id_application) NOT NULL,
    name           character varying(100) COLLATE pg_catalog."default"          NOT NULL,
    description    character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT attribute_pkey PRIMARY KEY (id_attribute)
);

CREATE TABLE IF NOT EXISTS applications.attribute_language
(
    id_attribute integer references applications.attribute (id_attribute) NOT NULL,
    id_language  integer references public.language (id_language)         NOT NULL,
    name         character varying(100) COLLATE pg_catalog."default"      NOT NULL,
    description  character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT attribute_language_pkey PRIMARY KEY (id_attribute, id_language)
);

CREATE TABLE IF NOT EXISTS applications.permission
(
    id_permission  SERIAL,
    id_application integer references applications.application (id_application) NOT NULL,
    name           character varying(100) COLLATE pg_catalog."default"          NOT NULL,
    description    character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT permission_pkey PRIMARY KEY (id_permission)
);

CREATE TABLE IF NOT EXISTS applications.permission_language
(
    id_permission integer references applications.permission (id_permission) NOT NULL,
    id_language   integer references public.language (id_language)           NOT NULL,
    name          character varying(100) COLLATE pg_catalog."default"        NOT NULL,
    description   character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT permission_language_pkey PRIMARY KEY (id_permission, id_language)
);

CREATE TABLE IF NOT EXISTS applications.role
(
    id_role        SERIAL,
    id_application integer references applications.application (id_application) NOT NULL,
    name           character varying(100) COLLATE pg_catalog."default"          NOT NULL,
    description    character varying(255) COLLATE pg_catalog."default"          NOT NULL,
    CONSTRAINT role_pkey PRIMARY KEY (id_role)
);

CREATE TABLE IF NOT EXISTS applications.role_language
(
    id_role     integer references applications.role (id_role)      NOT NULL,
    id_language integer references public.language (id_language)    NOT NULL,
    name        character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT role_language_pkey PRIMARY KEY (id_role, id_language)
);

CREATE TABLE IF NOT EXISTS applications.role_permission
(
    id_role       integer references applications.role (id_role)             NOT NULL,
    id_permission integer references applications.permission (id_permission) NOT NULL,
    CONSTRAINT role_permission_pkey PRIMARY KEY (id_role, id_permission)
);

CREATE TABLE IF NOT EXISTS users.user_attribute
(
    id_user      integer references users."user" (id_user)                NOT NULL,
    id_attribute integer references applications.attribute (id_attribute) NOT NULL,
    value        character varying(255) COLLATE pg_catalog."default"      NOT NULL
);

CREATE TABLE IF NOT EXISTS users.user_permission
(
    id_user       integer references users."user" (id_user)  NOT NULL,
    id_permission integer references applications.permission NOT NULL,
    CONSTRAINT user_permission_pkey PRIMARY KEY (id_user, id_permission)
);

CREATE TABLE IF NOT EXISTS users.user_role
(
    id_user integer references users."user" (id_user)      NOT NULL,
    id_role integer references applications.role (id_role) NOT NULL,
    CONSTRAINT user_role_pkey PRIMARY KEY (id_user, id_role)
);

CREATE TABLE IF NOT EXISTS applications.application_language
(
    id_application integer references applications.application (id_application) NOT NULL,
    id_language    integer references public.language (id_language)             NOT NULL,
    name           character varying(100)                                       NOT NULL,
    description    character varying(255),
    PRIMARY KEY (id_application, id_language)
);
